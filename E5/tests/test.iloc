loadI 1024 => rfp
loadI 1024 => rsp
loadI 144 => rbss
jumpI  => L7
L0:                           // Declaração da função fibonacci
i2i rsp => rfp
addI rsp, 88 => rsp
storeAI r2 => rfp, 20         // Salva o estado dos registradores usados na função
storeAI r3 => rfp, 24
storeAI r4 => rfp, 28
storeAI r5 => rfp, 32
storeAI r6 => rfp, 36
storeAI r7 => rfp, 40
storeAI r8 => rfp, 44
storeAI r9 => rfp, 48
storeAI r10 => rfp, 52
storeAI r11 => rfp, 56
storeAI r12 => rfp, 60
storeAI r13 => rfp, 64
storeAI r14 => rfp, 68
storeAI r15 => rfp, 72
storeAI r16 => rfp, 76
storeAI r17 => rfp, 80
storeAI r18 => rfp, 84
loadAI rfp, 16 => r2          // Carrega variável n
loadI 1 => r3
cmp_EQ r2, r3 => r4
cbr r4 => L4, L6
L4:                           // Label true do if
loadI 0 => r5                 // Início do retorno
storeAI r5 => rfp, 12         // Escreve o valor de retorno na pilha
loadAI rfp, 20 => r2          // Restaura o estado dos registradores usados
loadAI rfp, 24 => r3
loadAI rfp, 28 => r4
loadAI rfp, 32 => r5
loadAI rfp, 36 => r6
loadAI rfp, 40 => r7
loadAI rfp, 44 => r8
loadAI rfp, 48 => r9
loadAI rfp, 52 => r10
loadAI rfp, 56 => r11
loadAI rfp, 60 => r12
loadAI rfp, 64 => r13
loadAI rfp, 68 => r14
loadAI rfp, 72 => r15
loadAI rfp, 76 => r16
loadAI rfp, 80 => r17
loadAI rfp, 84 => r18
loadAI rfp, 0 => r1           // Carrega end de retorno
loadAI rfp, 4 => r0           // Carrega ultimo RSP
i2i r0 => rsp
loadAI rfp, 8 => r0           // Carrega ultimo RFP
i2i r0 => rfp
jump  => r1
jumpI  => L5
L6:                           // Label false do if
loadAI rfp, 16 => r6          // Carrega variável n
loadI 2 => r7
cmp_EQ r6, r7 => r8
cbr r8 => L1, L3
L1:                           // Label true do if
loadI 1 => r9                 // Início do retorno
storeAI r9 => rfp, 12         // Escreve o valor de retorno na pilha
loadAI rfp, 20 => r2          // Restaura o estado dos registradores usados
loadAI rfp, 24 => r3
loadAI rfp, 28 => r4
loadAI rfp, 32 => r5
loadAI rfp, 36 => r6
loadAI rfp, 40 => r7
loadAI rfp, 44 => r8
loadAI rfp, 48 => r9
loadAI rfp, 52 => r10
loadAI rfp, 56 => r11
loadAI rfp, 60 => r12
loadAI rfp, 64 => r13
loadAI rfp, 68 => r14
loadAI rfp, 72 => r15
loadAI rfp, 76 => r16
loadAI rfp, 80 => r17
loadAI rfp, 84 => r18
loadAI rfp, 0 => r1           // Carrega end de retorno
loadAI rfp, 4 => r0           // Carrega ultimo RSP
i2i r0 => rsp
loadAI rfp, 8 => r0           // Carrega ultimo RFP
i2i r0 => rfp
jump  => r1
jumpI  => L2
L3:                           // Label false do if
storeAI rsp => rsp, 4         // Início do retorno
storeAI rfp => rsp, 8
loadAI rfp, 16 => r10         // Carrega variável n
loadI 1 => r11
sub r10, r11 => r12
storeAI r12 => rsp, 16        // grava o parametro 1 da função
addI rpc, 3 => r0
storeAI r0 => rsp, 0
jumpI  => L0                  // Salta para a função fibonacci()
loadAI rsp, 12 => r13         // Carrega o valor de retorno de fibonacci()
storeAI rsp => rsp, 4         // Inicio da chamada de fibonacci()
storeAI rfp => rsp, 8
loadAI rfp, 16 => r14         // Carrega variável n
loadI 2 => r15
sub r14, r15 => r16
storeAI r16 => rsp, 16        // grava o parametro 1 da função
addI rpc, 3 => r0
storeAI r0 => rsp, 0
jumpI  => L0                  // Salta para a função fibonacci()
loadAI rsp, 12 => r17         // Carrega o valor de retorno de fibonacci()
add r13, r17 => r18
storeAI r18 => rfp, 12        // Escreve o valor de retorno na pilha
loadAI rfp, 20 => r2          // Restaura o estado dos registradores usados
loadAI rfp, 24 => r3
loadAI rfp, 28 => r4
loadAI rfp, 32 => r5
loadAI rfp, 36 => r6
loadAI rfp, 40 => r7
loadAI rfp, 44 => r8
loadAI rfp, 48 => r9
loadAI rfp, 52 => r10
loadAI rfp, 56 => r11
loadAI rfp, 60 => r12
loadAI rfp, 64 => r13
loadAI rfp, 68 => r14
loadAI rfp, 72 => r15
loadAI rfp, 76 => r16
loadAI rfp, 80 => r17
loadAI rfp, 84 => r18
loadAI rfp, 0 => r1           // Carrega end de retorno
loadAI rfp, 4 => r0           // Carrega ultimo RSP
i2i r0 => rsp
loadAI rfp, 8 => r0           // Carrega ultimo RFP
i2i r0 => rfp
jump  => r1
L2:                           // Label de final do if
L5:                           // Label de final do if
L7:                           // Declaração da função main
i2i rsp => rfp
addI rsp, 28 => rsp
storeAI r19 => rfp, 20        // Salva o estado dos registradores usados na função
storeAI r20 => rfp, 24
storeAI rsp => rsp, 4         // Inicio da chamada de fibonacci()
storeAI rfp => rsp, 8
loadI 15 => r19
storeAI r19 => rsp, 16        // grava o parametro 1 da função
addI rpc, 3 => r0
storeAI r0 => rsp, 0
jumpI  => L0                  // Salta para a função fibonacci()
loadAI rsp, 12 => r20         // Carrega o valor de retorno de fibonacci()
storeAI r20 => rfp, 16        // Grava variável i
halt